using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using RestSharp;

// -------------------------------- //
// IMPORTANT!!!!!!                  //
// Import RestSharp from NUGET!!!   //
// -------------------------------- //

namespace RestClient
{
    {{#distinct paths}}
    {{#if @changed}}
    }

    {{/if}}
    {{#if @group}}
    public class {{getRoot @key}}RestClient{
        private readonly RestSharp.RestClient _restClient;

        public {{getRoot @key}}RestClient(){
            this._restClient = new RestSharp.RestClient("{{getBaseUrl @../this}}");
        }
    {{/if}}
        {{#each this}}

        public {{#if (getReturnType this)}}{{getReturnType this}}{{else}}void{{/if}} {{this.operationId}}({{getFunctionParameters this}}){
            var request = new RestRequest(Method.{{toUpperCase @key}});
            request.Resource = "{{@../key}}";
            request.AddHeader("Accept", "application/json");
            {{#getRequestPathParameters this}}
            request.AddParameter("{{this.name}}",{{this.name}},ParameterType.UrlSegment); //Path parameter
            {{/getRequestPathParameters}}
            {{#getRequestQueryParameters this}}
            {{#if @isArray}}
            foreach(var parameter in {{this.name}}){
                request.AddQueryParameter("{{this.name}}",parameter); //Query parameter
            }
            {{else}}
            request.AddQueryParameter("{{this.name}}",{{this.name}}); //Query parameter
            {{/if}}
            {{/getRequestQueryParameters}}
            {{#getRequestBodyParameters this}}
            request.AddBody({{getBodyParameter this}}); //Body parameter
            {{/getRequestBodyParameters}}

            {{#if (getReturnTypeIfObject this)}}
            return _restClient.Execute<{{getReturnTypeIfObject this}}>(request).Data;
            {{/if}}
            {{#if (getReturnTypeIfSingle this)}}
            return _restClient.Execute(request).Content;
            {{/if}}   
        }
        {{/each}}
    {{/distinct}}
    }

    {{#each definitions}}
    public class {{@key}} {

        {{#each this.properties}}
        public {{getType this}} {{@key}}{ get; set;}

        {{/each}}
    }

    {{/each}}
}